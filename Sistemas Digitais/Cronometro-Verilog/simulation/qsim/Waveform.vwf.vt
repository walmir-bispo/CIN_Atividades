// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/26/2021 14:49:08"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          fsm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module fsm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg key0;
reg key1;
reg key2;
reg key3;
// wires                                               
wire [3:0] out0;
wire [3:0] out1;
wire [3:0] out2;
wire [3:0] out3;

// assign statements (if any)                          
fsm i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.key0(key0),
	.key1(key1),
	.key2(key2),
	.key3(key3),
	.out0(out0),
	.out1(out1),
	.out2(out2),
	.out3(out3)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// key0
initial
begin
	key0 = 1'b1;
	key0 = #160000 1'b0;
	key0 = #20000 1'b1;
end 

// key1
initial
begin
	key1 = 1'b1;
	key1 = #330000 1'b0;
	key1 = #30000 1'b1;
	key1 = #230000 1'b0;
	key1 = #20000 1'b1;
end 

// key2
initial
begin
	key2 = 1'b1;
	key2 = #30000 1'b0;
	key2 = #10000 1'b1;
	key2 = #210000 1'b0;
	key2 = #10000 1'b1;
	key2 = #190000 1'b0;
	key2 = #30000 1'b1;
end 

// key3
initial
begin
	key3 = 1'b0;
	key3 = #10000 1'b1;
	key3 = #800000 1'b0;
	key3 = #40000 1'b1;
end 
endmodule

